`---
title: "Peter"
format: docx
editor: visual
---

## Quarto



## Trip Volume

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:'

test

5:48 pm

```{r}

con <- DBI::dbConnect(odbc::odbc(),
                      ## Driver = "SQL Server",
                      ##Driver = "{SQL Server Native Client 11.0}",
                      Driver = "{ODBC Driver 17 for SQL Server}", # this driver works better; it needs to be installed
                      Server = "TRSQLAG-PTDWP.th.gov.bc.ca",
                      Database = "PTDW_PRD",
                      Trusted_Connection = "yes")


```

You can add options to executable code like this

```{sql, connection=con}
 
select 
*
from 

	[PTDW_PRD].[dbo].[PTDW_ORGANIZATION] c

```


```{r}
load("\\\\Sfp.idir.bcgov\\S143\\S86501\\PTBoard\\Initiatives\\Data Modelling & Policy Initiative\\Data Economic Modelling Projects\\2023_011_Indicators\\src\\trip_volume\\3_trip_volume_cube.Rda")

library(tidyverse)
trip_vol_reduced<-trip_vol%>%
group_by(
  yr, 
  mth, 
  GEOSPATIAL_AREA_TYPE_CODE,
  TRIP_SERVICE_TYPE_CODE, 
  PICKUP_AREA,  
  PTS_ORGANIZATION_NAME
  )%>%
  summarize(
  vol=sum(volume),
  rev=sum(rev_per_vehcile)
  ) 


library(dplyr)
library(tidyr)
library(stringr)

# 1) (Optional) keep only the region you want
# df_long <- df_long %>%
#   filter(GEOSPATIAL_AREA_TYPE_CODE == "REGIONAL",
#          PICKUP_AREA == "Metro Vancouver Regional District")

# 2) Ensure months are labeled Jan…Dec and present even if missing
month_labs <- c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")

df_pivot <- trip_vol_reduced %>%
  mutate(
    mth = factor(mth, levels = 1:12, labels = month_labs),
    yr  = as.integer(yr)
  ) %>%
  group_by(TRIP_SERVICE_TYPE_CODE, yr, mth) %>%     # sum to year-month-service
  summarise(vol = sum(vol, na.rm = TRUE), .groups = "drop") %>%
  complete(TRIP_SERVICE_TYPE_CODE, yr, mth, fill = list(vol = 0)) %>% # fill missing months
  arrange(TRIP_SERVICE_TYPE_CODE, yr, mth) %>%
  pivot_wider(
    names_from = mth,
    values_from = vol
  ) %>%
  arrange(TRIP_SERVICE_TYPE_CODE, yr)

df_pivot


library(kableExtra)

mtcars[1:10, 1:6]

kbl(mtcars[1:10, 1:6], caption = "Group Rows") %>%
  kable_paper("striped", full_width = F) %>%
  pack_rows("Group 1", 4, 7) %>%
  pack_rows("Group 2", 8, 10)


trip_vol_reduced



library(dplyr)
library(tidyr)
library(kableExtra)

# --- 0) Your long data (example column names from your screenshot)
# df_long: yr, mth (1–12), TRIP_SERVICE_TYPE_CODE, vol, ...

month_labs <- c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")

# --- 1) Pivot to Jan–Dec columns
df_pivot <- trip_vol_reduced %>%
  mutate(
    mth = factor(mth, levels = 1:12, labels = month_labs),
    yr  = as.integer(yr)
  ) %>%
  group_by(TRIP_SERVICE_TYPE_CODE, yr, mth) %>%
  summarise(vol = sum(vol, na.rm = TRUE), .groups = "drop") %>%
  complete(TRIP_SERVICE_TYPE_CODE, yr, mth, fill = list(vol = 0)) %>%
  pivot_wider(names_from = mth, values_from = vol)

# --- 2) Order rows and prepare a printable data frame
df_print <- df_pivot %>%
  arrange(TRIP_SERVICE_TYPE_CODE, yr) %>%
  select(Service = TRIP_SERVICE_TYPE_CODE, Year = yr, all_of(month_labs))

# --- 3) Compute row ranges for each Service to feed pack_rows()
grp_meta <- df_print %>%
  count(Service, name = "n") %>%
  mutate(start = lag(cumsum(n), default = 0) + 1,
         end   = cumsum(n))

# --- 4) Build the kable with group headers
tab <- df_print %>%
  select(-Service) %>%  # drop the Service column; we'll show it as a group header
  kbl(
    caption = "Metro Vancouver Regional District Trip Volume",
    align   = c("l", rep("r", length(month_labs))),  # Year left, months right
    digits  = 0,
    format.args = list(big.mark = ",")
  ) %>%
  kable_paper("striped", full_width = FALSE) %>%
  column_spec(1, bold = TRUE)  # make the Year column stand out

# Add a pack_rows() block for each service (TAXI, TNS) programmatically
for (i in seq_len(nrow(grp_meta))) {
  tab <- tab %>%
    pack_rows(grp_meta$Service[i], grp_meta$start[i], grp_meta$end[i])
}

tab

```


```{r}
library(dplyr)
library(tidyr)
library(kableExtra)

# Labels for months
month_labs <- c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")

# 1) Pivot to Jan–Dec columns for VOLUME
df_pivot_vol <- trip_vol_reduced %>%
  mutate(
    mth = factor(mth, levels = 1:12, labels = month_labs),
    yr  = as.integer(yr)
  ) %>%
  group_by(TRIP_SERVICE_TYPE_CODE, yr, mth) %>%
  summarise(vol = sum(vol, na.rm = TRUE), .groups = "drop") %>%
  complete(TRIP_SERVICE_TYPE_CODE, yr, mth, fill = list(vol = 0)) %>%
  pivot_wider(names_from = mth, values_from = vol)

# 2) Order rows and prep printable frame
df_print_vol <- df_pivot_vol %>%
  arrange(TRIP_SERVICE_TYPE_CODE, yr) %>%
  select(Service = TRIP_SERVICE_TYPE_CODE, Year = yr, all_of(month_labs))

# (Optional) add a Year Total column
df_print_vol <- df_print_vol %>%
  mutate(`Year Total` = rowSums(across(all_of(month_labs)), na.rm = TRUE))

# 3) Compute row ranges for pack_rows()
grp_meta <- df_print_vol %>%
  count(Service, name = "n") %>%
  mutate(start = lag(cumsum(n), default = 0) + 1,
         end   = cumsum(n))

# 4) Build the kable with group headers
tab_vol <- df_print_vol %>%
  select(-Service) %>%  # Service shown via group headers
  kbl(
    caption = "Trip Volume by Service and Year (Jan–Dec)",
    align   = c("l", rep("r", length(month_labs) + 1)),  # Year left, months + total right
    digits  = 0,
    format.args = list(big.mark = ",")
  ) %>%
  kable_paper("striped", full_width = FALSE) %>%
  column_spec(1, bold = TRUE)

for (i in seq_len(nrow(grp_meta))) {
  tab_vol <- tab_vol %>%
    pack_rows(grp_meta$Service[i], grp_meta$start[i], grp_meta$end[i])
}

tab_vol
```


```{r}
library(dplyr)
library(tidyr)
library(kableExtra)
# Optional for currency labels:
# library(scales)

month_labs <- c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")

# 1) Pivot to Jan–Dec columns for REVENUE
df_pivot_rev <- trip_vol_reduced %>%
  mutate(
    mth = factor(mth, levels = 1:12, labels = month_labs),
    yr  = as.integer(yr)
  ) %>%
  group_by(TRIP_SERVICE_TYPE_CODE, yr, mth) %>%
  summarise(rev = sum(rev, na.rm = TRUE), .groups = "drop") %>%
  complete(TRIP_SERVICE_TYPE_CODE, yr, mth, fill = list(rev = 0)) %>%
  pivot_wider(names_from = mth, values_from = rev)

# 2) Order rows and prep printable frame
df_print_rev <- df_pivot_rev %>%
  arrange(TRIP_SERVICE_TYPE_CODE, yr) %>%
  select(Service = TRIP_SERVICE_TYPE_CODE, Year = yr, all_of(month_labs)) %>%
  mutate(`Year Total` = rowSums(across(all_of(month_labs)), na.rm = TRUE))

# 3) Compute row ranges for pack_rows()
grp_meta <- df_print_rev %>%
  count(Service, name = "n") %>%
  mutate(start = lag(cumsum(n), default = 0) + 1,
         end   = cumsum(n))

# 4) Build the kable with group headers
tab_rev <- df_print_rev %>%
  select(-Service) %>%  # Service shown via group headers
  kbl(
    caption = "Revenue by Service and Year (Jan–Dec)",
    align   = c("l", rep("r", length(month_labs) + 1)),
    digits  = 0,
    format.args = list(big.mark = ",")
  ) %>%
  kable_paper("striped", full_width = FALSE) %>%
  column_spec(1, bold = TRUE)

for (i in seq_len(nrow(grp_meta))) {
  tab_rev <- tab_rev %>% pack_rows(grp_meta$Service[i], grp_meta$start[i], grp_meta$end[i])
}

tab_rev
```


```{r}
library(dplyr)
library(tidyr)
library(ggplot2)
library(scales)
library(lubridate)

# ... build df_vol_metro as before ...

p <- ggplot(df_vol_metro, aes(x = date, y = volume, fill = TRIP_SERVICE_TYPE_CODE)) +
  geom_col(width = 25) +
  scale_fill_manual(values = c("TAXI" = "#5AA9FF", "TNS" = "#1F3A93"), name = "Service Type") +
  scale_y_continuous(labels = label_number(scale_cut = cut_short_scale())) +  # <- FIX
  scale_x_date(
    date_breaks = "1 month",
    date_labels = "%Y\n%b",
    expand = expansion(mult = c(0.01, 0.02))
  ) +
  labs(
    title = "Figure 1: Metro Vancouver Regional District Trip Volume",
    y = "Trip Volume (trips)", x = NULL
  ) +
  theme_minimal(base_size = 12) +
  theme(
    panel.grid.minor = element_blank(),
    axis.text.x = element_text(vjust = 1, size = 9),
    legend.position = "top",
    plot.title = element_text(face = "bold", size = 16)
  )

p

```


```{r}
# ---- Libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(scales)
library(lubridate)

# =========================
# 1) Build monthly volume DF
# =========================
# Assumes `trip_vol` is already loaded (as in your earlier code)

df_vol_metro <- trip_vol %>%
  filter(
    GEOSPATIAL_AREA_TYPE_CODE == "REGIONAL",
    PICKUP_AREA == "Metro Vancouver Regional District"
  ) %>%
  group_by(yr, mth, TRIP_SERVICE_TYPE_CODE) %>%
  summarise(volume = sum(volume, na.rm = TRUE), .groups = "drop") %>%
  mutate(
    yr  = as.integer(yr),
    mth = as.integer(mth),
    date = as.Date(sprintf("%d-%02d-01", yr, mth))
  ) %>%
  # Ensure every month exists for each service (fill with 0)
  complete(
    TRIP_SERVICE_TYPE_CODE,
    date = seq(floor_date(min(date), "month"),
               floor_date(max(date), "month"),
               by = "month"),
    fill = list(volume = 0)
  ) %>%
  arrange(date, TRIP_SERVICE_TYPE_CODE)

# =========================
# 2) Plot (stacked bars)
# =========================

# Choose colors; if services are exactly TAXI/TNS, these will match.
svc_levels <- sort(unique(df_vol_metro$TRIP_SERVICE_TYPE_CODE))
manual_cols <- setNames(
  # cycle two blues if there are only two services; extend if needed
  c("#5AA9FF", "#1F3A93")[seq_along(svc_levels) %% 2 + 1],
  svc_levels
)

# Quarterly x-axis breaks to avoid overlap
start_date <- floor_date(min(df_vol_metro$date), "month")
end_date   <- floor_date(max(df_vol_metro$date), "month")
quarter_breaks <- seq(start_date, end_date, by = "3 months")

ggplot(df_vol_metro, aes(x = date, y = volume, fill = TRIP_SERVICE_TYPE_CODE)) +
  geom_col(width = 25) +
  scale_fill_manual(values = manual_cols, name = "Service Type") +
  scale_y_continuous(labels = label_number(scale_cut = cut_short_scale())) +
  scale_x_date(
    breaks = quarter_breaks,
    labels = label_date("%Y\n%b"),
    expand = expansion(mult = c(0.01, 0.02))
  ) +
  labs(
    title = "Figure 1: Metro Vancouver Regional District Trip Volume",
    x = NULL,
    y = "Trip Volume (trips)"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    panel.grid.minor = element_blank(),
    axis.text.x = element_text(size = 9, lineheight = 0.9),
    legend.position = "top",
    legend.title = element_text(size = 10),
    legend.text  = element_text(size = 10),
    plot.title   = element_text(face = "bold", size = 16)
  )


```


```{r}
# ---- Libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(scales)
library(lubridate)

# =========================
# 1) Build monthly revenue DF
# =========================
# Assumes `trip_vol` is loaded.
# If your revenue column name differs, change `rev_per_vehcile` below.
df_rev_metro <- trip_vol %>%
  filter(
    GEOSPATIAL_AREA_TYPE_CODE == "REGIONAL",
    PICKUP_AREA == "Metro Vancouver Regional District"
  ) %>%
  group_by(yr, mth, TRIP_SERVICE_TYPE_CODE) %>%
  summarise(revenue = sum(rev_per_vehcile, na.rm = TRUE), .groups = "drop") %>%
  mutate(
    yr  = as.integer(yr),
    mth = as.integer(mth),
    date = as.Date(sprintf("%d-%02d-01", yr, mth))
  ) %>%
  # Ensure every month exists for each service (fill with 0)
  complete(
    TRIP_SERVICE_TYPE_CODE,
    date = seq(floor_date(min(date), "month"),
               floor_date(max(date), "month"),
               by = "month"),
    fill = list(revenue = 0)
  ) %>%
  arrange(date, TRIP_SERVICE_TYPE_CODE)

# =========================
# 2) Plot (stacked bars)
# =========================
svc_levels <- sort(unique(df_rev_metro$TRIP_SERVICE_TYPE_CODE))
manual_cols <- setNames(
  c("#5AA9FF", "#1F3A93")[seq_along(svc_levels) %% 2 + 1],
  svc_levels
)

start_date <- floor_date(min(df_rev_metro$date), "month")
end_date   <- floor_date(max(df_rev_metro$date), "month")
quarter_breaks <- seq(start_date, end_date, by = "3 months")

ggplot(df_rev_metro, aes(x = date, y = revenue, fill = TRIP_SERVICE_TYPE_CODE)) +
  geom_col(width = 25) +
  scale_fill_manual(values = manual_cols, name = "Service Type") +
  scale_y_continuous(labels = label_number(prefix = "$", scale_cut = cut_short_scale())) +
  scale_x_date(
    breaks = quarter_breaks,
    labels = label_date("%Y\n%b"),
    expand = expansion(mult = c(0.01, 0.02))
  ) +
  labs(
    title = "Figure: Metro Vancouver Regional District Revenue",
    x = NULL,
    y = "Revenue"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    panel.grid.minor = element_blank(),
    axis.text.x = element_text(size = 9, lineheight = 0.9),
    legend.position = "top",
    legend.title = element_text(size = 10),
    legend.text  = element_text(size = 10),
    plot.title   = element_text(face = "bold", size = 16)
  )

```



```{r}
regions <- trip_vol %>%
  filter(GEOSPATIAL_AREA_TYPE_CODE == "REGIONAL") %>%
  distinct(PICKUP_AREA) %>%
  arrange(PICKUP_AREA)

regions
```








```{r}
# ------------------------------------------------------------
# Libraries
# ------------------------------------------------------------
suppressPackageStartupMessages({
  library(dplyr)
  library(tidyr)
  library(kableExtra)
})

# ------------------------------------------------------------
# 0) Regions list (with your additions) + optional auto-detect
# ------------------------------------------------------------
# If TRUE, regions will be pulled from your dataset (recommended).
# If FALSE, the fixed vector below will be used.
AUTO_DETECT_REGIONS <- TRUE

regions_fixed <- c(
  "Capital Regional District",
  "Cariboo Regional District",
  "Columbia-Shuswap Regional District",
  "Comox Valley Regional District",
  "Cowichan Valley Regional District",
  "Fraser Valley Regional District",
  "Metro Vancouver Regional District",
  "North Coast Regional District",
  "Peace River Regional District",
  "Regional District of Alberni-Clayoquot",
  "Regional District of Bulkley-Nechako",
  "Regional District of Central Kootenay",
  "Regional District of Central Okanagan",
  "Regional District of East Kootenay",
  "Regional District of Fraser-Fort George",
  "Regional District of Kitimat-Stikine",
  "Regional District of Kootenay Boundary",
  "Regional District of Mount Waddington",
  "Regional District of Nanaimo",
  "Regional District of North Okanagan",
  "Regional District of Okanagan-Similkameen",
  "Squamish-Lillooet Regional District",
  "Strathcona Regional District",
  "Sunshine Coast Regional District",
  "Thompson-Nicola Regional District",
  "qathet Regional District"
)

# ------------------------------------------------------------
# 0a) Choose region (edit here)
# ------------------------------------------------------------
# Pick by name (edit this string), or by index using REGION_IDX
REGION     <- "Cariboo Regional District"
# REGION_IDX <- 7  # alternative; uncomment and use regions[REGION_IDX]

# ------------------------------------------------------------
# 0b) Resolve regions, sanitize input, and validate selection
#     (assumes your data.frame `trip_vol_reduced` already exists)
#     Required columns: GEOSPATIAL_AREA_TYPE_CODE, PICKUP_AREA, yr, mth,
#     vol, rev, TRIP_SERVICE_TYPE_CODE
# ------------------------------------------------------------
required_cols <- c(
  "GEOSPATIAL_AREA_TYPE_CODE","PICKUP_AREA","yr","mth",
  "vol","rev","TRIP_SERVICE_TYPE_CODE"
)
missing_cols <- setdiff(required_cols, names(trip_vol_reduced))
if (length(missing_cols) > 0) {
  stop(sprintf("Your data is missing required columns: %s",
               paste(missing_cols, collapse = ", ")))
}

# Normalize a few fields to reduce “gotcha” mismatches
trip_vol_reduced <- trip_vol_reduced %>%
  mutate(
    PICKUP_AREA = trimws(as.character(PICKUP_AREA)),
    GEOSPATIAL_AREA_TYPE_CODE = trimws(as.character(GEOSPATIAL_AREA_TYPE_CODE))
  )

regions_auto <- trip_vol_reduced %>%
  filter(GEOSPATIAL_AREA_TYPE_CODE == "REGIONAL", !is.na(PICKUP_AREA), PICKUP_AREA != "") %>%
  distinct(PICKUP_AREA) %>%
  arrange(PICKUP_AREA) %>%
  pull(PICKUP_AREA)

regions <- if (isTRUE(AUTO_DETECT_REGIONS)) regions_auto else regions_fixed

if (length(regions) == 0) {
  stop("No regions found. Check that your data has REGIONAL rows and PICKUP_AREA values.")
}

# Resolve region selection
region_name <- REGION
# region_name <- regions[REGION_IDX]  # <- use this line instead if you go by index

if (!region_name %in% regions) {
  stop(sprintf(
    "Region must be one of the available regions.\nGiven: %s\nAvailable:\n- %s",
    region_name, paste(regions, collapse = "\n- ")
  ))
}

# Also verify the region actually appears in the dataset
if (!region_name %in% unique(trip_vol_reduced$PICKUP_AREA)) {
  stop(sprintf("Region not found in your data: %s", region_name))
}

# ------------------------------------------------------------
# 1) Table builder
# ------------------------------------------------------------
month_labs <- c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")

build_region_table <- function(df, region_name, measure = c("vol","rev"),
                               caption_prefix = "Table") {
  measure <- match.arg(measure)

  df_pivot <- df %>%
    filter(GEOSPATIAL_AREA_TYPE_CODE == "REGIONAL",
           PICKUP_AREA == region_name) %>%
    mutate(
      yr  = as.integer(yr),
      mth = as.integer(mth)
    ) %>%
    group_by(TRIP_SERVICE_TYPE_CODE, yr, mth) %>%
    summarise(val = sum(.data[[measure]], na.rm = TRUE), .groups = "drop") %>%
    complete(TRIP_SERVICE_TYPE_CODE, yr, mth = 1:12, fill = list(val = 0)) %>%
    mutate(mth = factor(mth, levels = 1:12, labels = month_labs)) %>%
    tidyr::pivot_wider(names_from = mth, values_from = val) %>%
    arrange(TRIP_SERVICE_TYPE_CODE, yr)

  if (nrow(df_pivot) == 0) {
    stop(sprintf("No %s data found for region: %s", measure, region_name))
  }

  df_print <- df_pivot %>%
    select(Service = TRIP_SERVICE_TYPE_CODE, Year = yr, all_of(month_labs)) %>%
    mutate(`Year Total` = rowSums(across(all_of(month_labs)), na.rm = TRUE))

  grp_meta <- df_print %>%
    count(Service, name = "n") %>%
    mutate(
      start = lag(cumsum(n), default = 0) + 1,
      end   = cumsum(n)
    )

  cap <- sprintf("%s: %s by Service and Year — %s",
                 caption_prefix,
                 if (measure == "vol") "Trip Volume" else "Revenue",
                 region_name)

  tab <- df_print %>%
    select(-Service) %>%
    kbl(
      caption = cap,
      align   = c("l", rep("r", length(month_labs) + 1)),
      digits  = 0,
      format.args = list(big.mark = ",")
    ) %>%
    kable_paper("striped", full_width = FALSE) %>%
    column_spec(1, bold = TRUE)

  for (i in seq_len(nrow(grp_meta))) {
    tab <- tab %>% pack_rows(grp_meta$Service[i], grp_meta$start[i], grp_meta$end[i])
  }
  tab
}

# ------------------------------------------------------------
# 2) Build + print the tables
# ------------------------------------------------------------
tab_vol <- build_region_table(trip_vol_reduced, region_name, measure = "vol",
                              caption_prefix = "Table 1")
tab_rev <- build_region_table(trip_vol_reduced, region_name, measure = "rev",
                              caption_prefix = "Table 2")

tab_vol
tab_rev

# ------------------------------------------------------------
# (Optional) Quick peek at available regions (uncomment to print)
# ------------------------------------------------------------
# cat("Available regions:\n- ", paste(regions, collapse = "\n- "), "\n", sep = "")

```




```{r}
library(dplyr)
library(flextable)
library(ftExtra)
library(officer)  # for fp_border()
 
# --- toy data (swap in yours) ---
dat <- tibble::tibble(
  Region  = c("Capital","Capital","Capital","Metro","Metro","Metro"),
  Service = c("TNS","TNS","Taxi","TNS","Taxi","Taxi"),
  Year    = c(2024,2025,2024,2024,2024,2025),
  Jan     = c(200,230, 80, 300,100,120),
  Feb     = c(220,240, 90, 320,110,130)
) |>
  arrange(Region, Service, Year)
 
data_cols <- c("Year","Jan","Feb")
 
# 1) grouped_data: Region ▶ Service
gd <- as_grouped_data(
  x = dat, groups = c("Region","Service"),
  columns = data_cols, expand_single = TRUE
)
 
# 2) Drop duplicate Region banners (keep grouped_data attrs via base `[`):
#    - find banner rows
banner_mask <- !is.na(gd$Region) & is.na(gd$Service) &
               rowSums(is.na(gd[, data_cols, drop = FALSE])) == length(data_cols)
idx_banner  <- which(banner_mask)
#    - among those, drop the 2nd+ per Region
drop_rows   <- idx_banner[ duplicated(gd$Region[idx_banner]) ]
gd2         <- if (length(drop_rows)) gd[-drop_rows, , drop = FALSE] else gd
 
# 3) Flextable (two-layer banners; Region not repeated)
ft <- as_flextable(gd2, col_keys = data_cols, hide_grouplabel = TRUE) |>
  #theme_booktabs() |>
  autofit()
 
# 4) Hlines between Regions: draw the bottom border of the row *before* each later Region banner
banner_mask2 <- !is.na(gd2$Region) & is.na(gd2$Service) &
                rowSums(is.na(gd2[, data_cols, drop = FALSE])) == length(data_cols)
idx_banner2  <- which(banner_mask2)
i_sep        <- idx_banner2[-1] - 1L
if (length(i_sep)) {
  ft <- hline(
    x = ft, i = i_sep, j = data_cols,
    border = fp_border(color = "#9AA0A6", width = 1.25),
    part = "body"
  )
}
 
# (Optional) underlying cleaned dataset (no banner rows)
clean_dataset <- subset(gd2, !is.na(Service) | !is.na(Year),
                        select = c("Region","Service", data_cols))
 
ft
```


```{r}
# --- 1) Build grouped_data with Region ▶ Service ---
gd <- as_grouped_data(
  x = dat,
  groups = c("Region","Service"),   # two levels
  columns = data_cols,
  expand_single = TRUE
)

# --- 2) Keep both Region and Service banners ---
gd2 <- gd   # no need to drop Region banners now

# --- 3) Build flextable ---
ft <- as_flextable(gd2, col_keys = data_cols, hide_grouplabel = FALSE) |>
  theme_booktabs() |>
  bg(bg = "#F1F3F4", part = "header") |>
  bold(part = "header") |>
  align(align = "center", part = "header") |>
  fontsize(size = 10, part = "header") |>
  align(j = setdiff(data_cols, "Year"), align = "right", part = "body") |>
  align(j = "Year", align = "left", part = "body") |>
  bold(j = "Year", part = "body") |>
  fontsize(size = 10, part = "body") |>
  padding(padding = 2, part = "all")

# --- 4) Thousand separators for numbers ---
ft <- colformat_num(ft, j = setdiff(data_cols, "Year"), big.mark = ",", digits = 0)

# --- 5) Style Region banners (Capital / Metro) ---
is_region_banner <- !is.na(gd2$Region) & is.na(gd2$Service) &
                    rowSums(is.na(gd2[, data_cols, drop = FALSE])) == length(data_cols)
region_rows <- which(is_region_banner)

if (length(region_rows)) {
  ft <- bold(ft, i = region_rows, bold = TRUE, part = "body")
  ft <- fontsize(ft, i = region_rows, size = 12, part = "body")
  ft <- align(ft, i = region_rows, align = "left", part = "body")
}

# --- 6) Style Service banners (Taxi / TNS) ---
is_service_banner <- !is.na(gd2$Service) & is.na(gd2$Region) &
                     rowSums(is.na(gd2[, data_cols, drop = FALSE])) == length(data_cols)
service_rows <- which(is_service_banner)

if (length(service_rows)) {
  gd2$Service[service_rows] <- toupper(gd2$Service[service_rows])
  ft <- bold(ft, i = service_rows, bold = TRUE, part = "body")
  ft <- fontsize(ft, i = service_rows, size = 11, part = "body")
  ft <- align(ft, i = service_rows, align = "left", part = "body")
}

# --- 7) Add separator lines between Regions and Services ---
i_sep <- c(region_rows[-1] - 1L, service_rows[-1] - 1L)
if (length(i_sep)) {
  ft <- hline(ft, i = i_sep, border = fp_border(color = "#9AA0A6", width = 1.25),
              part = "body")
}

ft

```



```{r}
as.array()
```



